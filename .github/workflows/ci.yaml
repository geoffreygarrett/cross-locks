name: CI

on:
  push:
    branches: [ main ]
  pull_request:

env:
  # nice coloured logs
  CARGO_TERM_COLOR: always

jobs:
  test:
    # one Ubuntu runner → the matrix fan-out happens *inside* the job
    runs-on: ubuntu-latest

    strategy:
      matrix:
        backend: [ native, browser ]

    steps:
      # 1️⃣  Checkout sources
      - uses: actions/checkout@v4

      # 2️⃣  Install a lean Rust toolchain + the wasm target
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal          # no clippy/rustfmt to keep it fast
          toolchain: stable
          override: true
          targets: wasm32-unknown-unknown

      # 3️⃣  Cache the build artefacts between runs (⇢ much faster CI)
      - uses: actions/cache@v4
        with:
          # target/ + cargo registry/git are enough
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # 4️⃣  Tiny helper that downloads *pre-built* wasm-pack binaries
      #     – avoids the flaky curl | bash dance that broke the previous job
      - uses: jetli/wasm-pack-action@v0.4
        if: matrix.backend == 'browser'
        with:
          version: 'latest'

      # 5️⃣  Native back-end tests (Tokio etc.)
      - name: Run native tests
        if: matrix.backend == 'native'
        run: cargo test --features nati ve --all-targets --verbose

      # 6️⃣  Browser / Web-Worker tests (headless Firefox)
      - name: Run browser tests (wasm32)
        if: matrix.backend == 'browser'
        env:
          # `wasm-pack` downloads geckodriver automatically – no extra setup
          WASM_BINDGEN_TEST_TIMEOUT: 60          # seconds; avoid rare timeouts
        run: |
          wasm-pack test --firefox --headless --features browser
          # ↑ xvfb is NOT required when Firefox runs with --headless

      # 7️⃣  (optional) upload the test artefacts for debugging
      # - uses: actions/upload-artifact@v4
      #   if: failure()
      #   with:
      #     name: wasm-failures
      #     path: target/wasm32-unknown-unknown/debug/deps/*.wasm
